<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAFzUkdCAK7O
        HOkAAAAEZ0FNQQAAsY8L/GEFAAAACXBIWXMAAA3VAAAN1QE91ljxAAAAGXRFWHRTb2Z0d2FyZQB3d3cu
        aW5rc2NhcGUub3Jnm+48GgAAAuNJREFUOE9lk/lL03Ecxod/SdkkKlNoqWhKgRrkgeExz5Rys7zCdEvy
        ZHOzckpe6ZTwaod5l8488MotPH6wllb+ohJBZGU2N4+cPH3eX1Ba/fDi897zfp6H7758vjwADghET/nn
        xRqld6re5HlTayG80/RGD7FGQbt//X8HnTxTtFLfjPatvKaZg/qB9+id+YQ+htrwAUyzX0jX2zxSNBLy
        OhSQ4HVLZ4wpGbLqplbRNLaCyoFlPOpf5s4qRvP4KnRTKxDKBm3kPSzhClirNEo2aNVMrkHRtYR7mrco
        6VjE7u8DDkXnEvK0ZpR2L0Hzag2RxQZ6EilXIEhu4/uk6rbqDB9RqDMju3kBOYwivfmooKj9HSQtTGcU
        s7lucBksY6Us79yNVqWofMyu7DAjtW4Waeo5ZDQwGueR27qA3LY3yGQzkdEwj3S2L+1cRErFuJ2yrKDF
        lK024rZ6Btcrp5FcZYSo2gRx9WuIaxwhnfZZjbOQqE2gLM898Yklv3kWiaoJxD0cR3zZBBLKJrG+uYON
        rT182djGNdUkRwKD9kkVkyhomQNleWfjGy3Z9dMQlowgXDaMCPkIItkcpRjFT1awad3jZoJ02scoR0FP
        TVmea5zaGCc3IEo2hOC8fgTnDyCkwIBQxg/LDivZ5WaC9BC2F8qHEV9iAGV5p4S1isAs/X60bBD+OT0I
        yOlFgKQXgdJefGN/gwoCpX3cb9KJGPlLXGYZyvJORlTxT0fV2MILnsP/Thd8M57BN7MDXzds+P5rh72L
        bXxe34If00gPyO5CROELUIay3EVyCa+UuMfXW69Iu+GTpgf7FsAuyn/QLuhuD8hLmaObyA8rd3K5WmF0
        ja6xXkrXwjdVCy9RGwTJLRxe4jb4pWlxMV2DM8xDXsocFRDOoWVOzqEqKT9MZXWLrbULkhrhLWrioNkt
        9vH+iTCVjfkk5D3MHRUccizoPp+hPB78wMROC8FmIzsVtHP0g/cHK/OJfyPUakoAAAAASUVORK5CYII=
</value>
  </data>
  <data name="lblNote.Text" xml:space="preserve">
    <value>Metadata is now gathered internally rather than with KindleUnpack. If you run into any metadata extraction errors, there is a setting to turn KindleUnpack back on. Please report any such errors on the MobileRead thread to help improve the program.</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAA
        AAAAqqoDAIGeagF8mN0Acop9AFWqAwAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVPF9jX9NfYGDJUlZWPgAA
        AAAAAAAAApa3ayijvfY/zeH/HJmw9AB0itAAbYojAAAAAAAAAAAAAAAAVFlUP19mZPLHysn/fX9/+F9k
        YqMAAAAAAAAAAAijxd6U5fL/Jd3z/yfb8P8xusz9AnSL5gBxjQkAAAAAAAAAAGJnZ8rJy8v/lpmY82Jj
        Y7ZVVVUMZGdlqFRZWTkCosV3VcXZ94Tu/P8i3fP/J9vw/yanuvcAcoyPAAAAAAAAAABlZ2bl09XV/19m
        ZO1cXFwLZ2loxoiLivpnamfAAP//AQKixsGa3uv9iPD8/yXe8/9Y3u//DoKb9gBxiDZfX18IaGxo2cnM
        y/+CiITwYmdl86+xsPfR0tH/am5qyQAAAAAAncIVB6PG1GfJ4fiz8Pn/VOX2/3DX5v4PhZz3JHSD6aSo
        p/fz9PT/19jX/+np6f/R0tH/b3Bw7l5kZCsAAAAAAAAAAAD//wECocZoEqXJ867l7/1r6Pf/leTv/wt+
        l//p7u//rq+v925zbtludHPibnJyxGRpaTMAAAAAAAAAAAAAAAAAAAAAAAAAAACfvxgNpsfy1PP5/zmp
        wP9bi5L/foB//HJ5dsZfX18IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/f38IRI2c3BKf
        v/9XhY3/zNPQ/3+FgvxeY2GaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeH14M36Df8R9f3/ie4B82a2v
        r/fz9PT/i46M+nB1c/vM09D/g4iG8V1iYJkAAAAAAAAAAAAAAAAAAAAAfHx8K4GIg+7Y2tr/8vPz/+fo
        6P/09fX/tLe293+DgsZdYV9zcHRy7szT0P+DiIbxXGFgmgAAAAAAAAAAAAAAAIaLisnN0M//wMLB95GV
        k/Tc3d367+/v/4KIg9l/f38IAAAAAF1fXW1wdHHuy9PP/4iMivFhZGSbAAAAAAAAAACKj4vAnqKh+YeM
        i8KEhIQbj5SS9vr6+v+FjIrlAAAAAAAAAAAAAAAAXGBebHJ5dO719vb/mJqZ8WJlY5wAAAAAhoqGOYyR
        j6d/f38Mi5CMu8PIx/bp6+r/jJGNygAAAAAAAAAAAAAAAAAAAABfZGFrfH597s7Pzv5eY1/gAAAAAAAA
        AAAAAAAAjpGRpayvrffX2dj/jZSS8YWJhT8AAAAAAAAAAAAAAAAAAAAAAAAAAF5jYWleZF/YVVVVGAAA
        AAAAAAAAAAAAAIaJhkqMkYzhjZOQtoSJiTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAB8MAAAODAAABgAAAAYAAAAAAAACAAAAAwAEAAPAPAADwHwAAgA8AAAAHAAAAgwAAAcEAAAHh
        AADB8QAAw/8AAA==
</value>
  </data>
</root>